impl Solution {
    pub fn num_prime_arrangements(n: i32) -> i32 {
        let data = [0, 1, 1, 2, 4, 12, 36, 144, 576, 2880, 17280, 86400, 604800, 3628800, 29030400, 261273600, 612735986, 289151874, 180670593, 445364737, 344376809, 476898489, 676578804, 89209194, 338137903, 410206413, 973508979, 523161503, 940068494, 400684877, 13697484, 150672324, 164118783, 610613205, 44103617, 58486801, 462170018, 546040181, 197044608, 320204381, 965722612, 554393872, 77422176, 83910457, 517313696, 36724464, 175182841, 627742601, 715505693, 327193394, 451768713, 263673556, 755921509, 94744060, 600274259, 410695940, 427837488, 541336889, 736149184, 514536044, 125049738, 250895270, 39391803, 772631128, 541031643, 428487046, 567378068, 780183222, 228977612, 448880523, 892906519, 858130261, 622773264, 78238453, 146637981, 918450925, 514800525, 828829204, 243264299, 351814543, 405243354, 909357725, 561463122, 913651722, 732754657, 430788419, 139670208, 938893256, 28061213, 673469112, 448961084, 80392418, 466684389, 201222617, 85583092, 76399490, 500763245, 519081041, 892915734, 75763854, 682289015];
        data[n as usize]
    }
    pub fn calc_num_prime_arrangements() {
        let mut ret = Vec::new();
        let primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199];
        ret.push(0_i32);

        for i in 1..101 {
            let mut num_primes = 0_i32;
            let mut data = 1_i64;
            for (j, &prime) in primes.iter().enumerate() {
                if i < prime {
                    num_primes = j as i32;
                    break;
                }
            }
            // println!("{} {}", i, num_primes);
            for j in 1_i32..num_primes + 1 {
                data *= j as i64;
                data %= 1_000_000_007;
            }
            for j in 1..(i - num_primes + 1) {
                data *= j as i64;
                data %= 1_000_000_007;
            }
            ret.push(data as i32);
        }
        println!("{:?}", ret);
    }
}

struct Solution;


fn main() {
    use std::io;
    Solution::calc_num_prime_arrangements();
    loop {
        let mut input = String::new();
        if io::stdin().read_line(&mut input).unwrap() == 0 {
            break;
        }
        println!("{:?}", Solution::num_prime_arrangements(input.trim().parse().unwrap()));
    }
}
